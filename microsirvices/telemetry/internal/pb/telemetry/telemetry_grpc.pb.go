// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: telemetry/telemetry.proto

package telemetry

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TelemetryService_ListLatestDeviceTelemetry_FullMethodName = "/telemetry.TelemetryService/ListLatestDeviceTelemetry"
	TelemetryService_ListDeviceTelemetry_FullMethodName       = "/telemetry.TelemetryService/ListDeviceTelemetry"
)

// TelemetryServiceClient is the client API for TelemetryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TelemetryServiceClient interface {
	ListLatestDeviceTelemetry(ctx context.Context, in *ListLatestDeviceTelemetryRequest, opts ...grpc.CallOption) (*ListLatestDeviceTelemetryResponse, error)
	ListDeviceTelemetry(ctx context.Context, in *ListDeviceTelemetryRequest, opts ...grpc.CallOption) (*ListDeviceTelemetryResponse, error)
}

type telemetryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTelemetryServiceClient(cc grpc.ClientConnInterface) TelemetryServiceClient {
	return &telemetryServiceClient{cc}
}

func (c *telemetryServiceClient) ListLatestDeviceTelemetry(ctx context.Context, in *ListLatestDeviceTelemetryRequest, opts ...grpc.CallOption) (*ListLatestDeviceTelemetryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListLatestDeviceTelemetryResponse)
	err := c.cc.Invoke(ctx, TelemetryService_ListLatestDeviceTelemetry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *telemetryServiceClient) ListDeviceTelemetry(ctx context.Context, in *ListDeviceTelemetryRequest, opts ...grpc.CallOption) (*ListDeviceTelemetryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDeviceTelemetryResponse)
	err := c.cc.Invoke(ctx, TelemetryService_ListDeviceTelemetry_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TelemetryServiceServer is the server API for TelemetryService service.
// All implementations must embed UnimplementedTelemetryServiceServer
// for forward compatibility.
type TelemetryServiceServer interface {
	ListLatestDeviceTelemetry(context.Context, *ListLatestDeviceTelemetryRequest) (*ListLatestDeviceTelemetryResponse, error)
	ListDeviceTelemetry(context.Context, *ListDeviceTelemetryRequest) (*ListDeviceTelemetryResponse, error)
	mustEmbedUnimplementedTelemetryServiceServer()
}

// UnimplementedTelemetryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTelemetryServiceServer struct{}

func (UnimplementedTelemetryServiceServer) ListLatestDeviceTelemetry(context.Context, *ListLatestDeviceTelemetryRequest) (*ListLatestDeviceTelemetryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLatestDeviceTelemetry not implemented")
}
func (UnimplementedTelemetryServiceServer) ListDeviceTelemetry(context.Context, *ListDeviceTelemetryRequest) (*ListDeviceTelemetryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDeviceTelemetry not implemented")
}
func (UnimplementedTelemetryServiceServer) mustEmbedUnimplementedTelemetryServiceServer() {}
func (UnimplementedTelemetryServiceServer) testEmbeddedByValue()                          {}

// UnsafeTelemetryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TelemetryServiceServer will
// result in compilation errors.
type UnsafeTelemetryServiceServer interface {
	mustEmbedUnimplementedTelemetryServiceServer()
}

func RegisterTelemetryServiceServer(s grpc.ServiceRegistrar, srv TelemetryServiceServer) {
	// If the following call pancis, it indicates UnimplementedTelemetryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TelemetryService_ServiceDesc, srv)
}

func _TelemetryService_ListLatestDeviceTelemetry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLatestDeviceTelemetryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServiceServer).ListLatestDeviceTelemetry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelemetryService_ListLatestDeviceTelemetry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServiceServer).ListLatestDeviceTelemetry(ctx, req.(*ListLatestDeviceTelemetryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TelemetryService_ListDeviceTelemetry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDeviceTelemetryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TelemetryServiceServer).ListDeviceTelemetry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TelemetryService_ListDeviceTelemetry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TelemetryServiceServer).ListDeviceTelemetry(ctx, req.(*ListDeviceTelemetryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TelemetryService_ServiceDesc is the grpc.ServiceDesc for TelemetryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TelemetryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "telemetry.TelemetryService",
	HandlerType: (*TelemetryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListLatestDeviceTelemetry",
			Handler:    _TelemetryService_ListLatestDeviceTelemetry_Handler,
		},
		{
			MethodName: "ListDeviceTelemetry",
			Handler:    _TelemetryService_ListDeviceTelemetry_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "telemetry/telemetry.proto",
}
