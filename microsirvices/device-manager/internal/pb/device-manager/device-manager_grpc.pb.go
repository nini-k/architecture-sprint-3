// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: device-manager/device-manager.proto

package device_manager

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DeviceManagerService_GetDevice_FullMethodName         = "/device_manager.DeviceManagerService/GetDevice"
	DeviceManagerService_AddDevice_FullMethodName         = "/device_manager.DeviceManagerService/AddDevice"
	DeviceManagerService_PutDeviceStatus_FullMethodName   = "/device_manager.DeviceManagerService/PutDeviceStatus"
	DeviceManagerService_SetDeviceCommands_FullMethodName = "/device_manager.DeviceManagerService/SetDeviceCommands"
	DeviceManagerService_GetDeviceCommands_FullMethodName = "/device_manager.DeviceManagerService/GetDeviceCommands"
)

// DeviceManagerServiceClient is the client API for DeviceManagerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeviceManagerServiceClient interface {
	GetDevice(ctx context.Context, in *GetDeviceRequest, opts ...grpc.CallOption) (*GetDeviceResponse, error)
	AddDevice(ctx context.Context, in *AddDeviceRequest, opts ...grpc.CallOption) (*AddDeviceResponse, error)
	PutDeviceStatus(ctx context.Context, in *PutDeviceStatusRequest, opts ...grpc.CallOption) (*PutDeviceStatusResponse, error)
	SetDeviceCommands(ctx context.Context, in *SetDeviceCommandsRequest, opts ...grpc.CallOption) (*SetDeviceCommandsResponse, error)
	GetDeviceCommands(ctx context.Context, in *GetDeviceCommandsRequest, opts ...grpc.CallOption) (*GetDeviceCommandsResponse, error)
}

type deviceManagerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeviceManagerServiceClient(cc grpc.ClientConnInterface) DeviceManagerServiceClient {
	return &deviceManagerServiceClient{cc}
}

func (c *deviceManagerServiceClient) GetDevice(ctx context.Context, in *GetDeviceRequest, opts ...grpc.CallOption) (*GetDeviceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDeviceResponse)
	err := c.cc.Invoke(ctx, DeviceManagerService_GetDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManagerServiceClient) AddDevice(ctx context.Context, in *AddDeviceRequest, opts ...grpc.CallOption) (*AddDeviceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddDeviceResponse)
	err := c.cc.Invoke(ctx, DeviceManagerService_AddDevice_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManagerServiceClient) PutDeviceStatus(ctx context.Context, in *PutDeviceStatusRequest, opts ...grpc.CallOption) (*PutDeviceStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PutDeviceStatusResponse)
	err := c.cc.Invoke(ctx, DeviceManagerService_PutDeviceStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManagerServiceClient) SetDeviceCommands(ctx context.Context, in *SetDeviceCommandsRequest, opts ...grpc.CallOption) (*SetDeviceCommandsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetDeviceCommandsResponse)
	err := c.cc.Invoke(ctx, DeviceManagerService_SetDeviceCommands_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceManagerServiceClient) GetDeviceCommands(ctx context.Context, in *GetDeviceCommandsRequest, opts ...grpc.CallOption) (*GetDeviceCommandsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDeviceCommandsResponse)
	err := c.cc.Invoke(ctx, DeviceManagerService_GetDeviceCommands_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeviceManagerServiceServer is the server API for DeviceManagerService service.
// All implementations must embed UnimplementedDeviceManagerServiceServer
// for forward compatibility.
type DeviceManagerServiceServer interface {
	GetDevice(context.Context, *GetDeviceRequest) (*GetDeviceResponse, error)
	AddDevice(context.Context, *AddDeviceRequest) (*AddDeviceResponse, error)
	PutDeviceStatus(context.Context, *PutDeviceStatusRequest) (*PutDeviceStatusResponse, error)
	SetDeviceCommands(context.Context, *SetDeviceCommandsRequest) (*SetDeviceCommandsResponse, error)
	GetDeviceCommands(context.Context, *GetDeviceCommandsRequest) (*GetDeviceCommandsResponse, error)
	mustEmbedUnimplementedDeviceManagerServiceServer()
}

// UnimplementedDeviceManagerServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDeviceManagerServiceServer struct{}

func (UnimplementedDeviceManagerServiceServer) GetDevice(context.Context, *GetDeviceRequest) (*GetDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDevice not implemented")
}
func (UnimplementedDeviceManagerServiceServer) AddDevice(context.Context, *AddDeviceRequest) (*AddDeviceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDevice not implemented")
}
func (UnimplementedDeviceManagerServiceServer) PutDeviceStatus(context.Context, *PutDeviceStatusRequest) (*PutDeviceStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutDeviceStatus not implemented")
}
func (UnimplementedDeviceManagerServiceServer) SetDeviceCommands(context.Context, *SetDeviceCommandsRequest) (*SetDeviceCommandsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDeviceCommands not implemented")
}
func (UnimplementedDeviceManagerServiceServer) GetDeviceCommands(context.Context, *GetDeviceCommandsRequest) (*GetDeviceCommandsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDeviceCommands not implemented")
}
func (UnimplementedDeviceManagerServiceServer) mustEmbedUnimplementedDeviceManagerServiceServer() {}
func (UnimplementedDeviceManagerServiceServer) testEmbeddedByValue()                              {}

// UnsafeDeviceManagerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeviceManagerServiceServer will
// result in compilation errors.
type UnsafeDeviceManagerServiceServer interface {
	mustEmbedUnimplementedDeviceManagerServiceServer()
}

func RegisterDeviceManagerServiceServer(s grpc.ServiceRegistrar, srv DeviceManagerServiceServer) {
	// If the following call pancis, it indicates UnimplementedDeviceManagerServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DeviceManagerService_ServiceDesc, srv)
}

func _DeviceManagerService_GetDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManagerServiceServer).GetDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceManagerService_GetDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManagerServiceServer).GetDevice(ctx, req.(*GetDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManagerService_AddDevice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDeviceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManagerServiceServer).AddDevice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceManagerService_AddDevice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManagerServiceServer).AddDevice(ctx, req.(*AddDeviceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManagerService_PutDeviceStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutDeviceStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManagerServiceServer).PutDeviceStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceManagerService_PutDeviceStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManagerServiceServer).PutDeviceStatus(ctx, req.(*PutDeviceStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManagerService_SetDeviceCommands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDeviceCommandsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManagerServiceServer).SetDeviceCommands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceManagerService_SetDeviceCommands_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManagerServiceServer).SetDeviceCommands(ctx, req.(*SetDeviceCommandsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceManagerService_GetDeviceCommands_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeviceCommandsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceManagerServiceServer).GetDeviceCommands(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DeviceManagerService_GetDeviceCommands_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceManagerServiceServer).GetDeviceCommands(ctx, req.(*GetDeviceCommandsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DeviceManagerService_ServiceDesc is the grpc.ServiceDesc for DeviceManagerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DeviceManagerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "device_manager.DeviceManagerService",
	HandlerType: (*DeviceManagerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDevice",
			Handler:    _DeviceManagerService_GetDevice_Handler,
		},
		{
			MethodName: "AddDevice",
			Handler:    _DeviceManagerService_AddDevice_Handler,
		},
		{
			MethodName: "PutDeviceStatus",
			Handler:    _DeviceManagerService_PutDeviceStatus_Handler,
		},
		{
			MethodName: "SetDeviceCommands",
			Handler:    _DeviceManagerService_SetDeviceCommands_Handler,
		},
		{
			MethodName: "GetDeviceCommands",
			Handler:    _DeviceManagerService_GetDeviceCommands_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "device-manager/device-manager.proto",
}
